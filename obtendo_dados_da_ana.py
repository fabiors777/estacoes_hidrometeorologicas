# -*- coding: utf-8 -*-
"""Obtendo dados da ANA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15EJW1gNoUBjzbMlH9MqPpOMYQXqoAM4T

Coletando Dados da ANA de forma automatizada com
HydroBR
HydroBR é uma biblioteca open-source para trabalhar com análise temporal
de dados hidrometeorológicos no Brasil
O HydroBR foi desenvolvido pelo Engenheiro Ambiental e Sanitarista Wallisson Carvalho
(https://wallissoncarvalho.github.io/sobremim/)
Você pode ver mais informações sobre a biblioteca naDocumentação
(https://wallissoncarvalho.github.io/HydroBr/)
https://wallissoncarvalho.medium.com/utilizando-a-biblioteca-hydrobr-parte-1-fe6026fa1d04
"""

pip install contextily

#importando as bibliotecas
import hydrobr
import geopandas # para trabalhar com dados geoespaciais
import contextily as cx # usado para elaborar mapa base
import folium # usado para mapas interativos
import plotly.graph_objs as go # usado para criar gráficos
from plotly.offline import plot, iplot
import cufflinks as cf # usado para conectar o plotly ao pandas
cf.go_offline()

"""Dados de Estações Pluviométricas e Fluviométricas"""

#Obtendo dados de precipitação
precStations = hydrobr.get_data.ANA.list_prec_stations()
#visualizando a tabela
precStations.head()

"""##Legenda dos dados:
* Data da primeira medição (Coluna 10 — StartDate)
* Data da última medição (Coluna 11 — EndDate)
* Número de anos com dados (Coluna 12 — NYD)
* Porcentagem de falhas entre a primeira e última medição (Coluna 13 — MD)
* Número de anos sem nenhuma falha (Coluna 14 — N_YWOMD)
* Porcentagem de anos com falhas(Coluna 15 — YWMD)
"""

# Filtrando os dados apenas de SC
precSC = precStations[precStations['State'] == 'SANTA CATARINA']
#visualizando o resultado do filtro
precSC.head()

#Transformando a tabela em um geodataframe
gdfSC = geopandas.GeoDataFrame(precSC, geometry = geopandas.points_from_xy(precSC.Longitude, precSC.Latitude))

#definindo sistema de coordenadas
gdfSC = gdfSC.set_crs("epsg:4326")

#transformando para webmercator
gdfSC_wm = gdfSC.to_crs(epsg = 3857)

#gerando a figura
ax = gdfSC_wm.plot(figsize=(10,10), color = 'red')
#adicionando as estações no mapa base
cx.add_basemap(ax)

gdfSC_wm.head()

# Criando mapa com base do OpenStreetMap
map = folium.Map(location = [-29,-48.], tiles='OpenStreetMap', zoom_start = 7)

#Adicionando as estações ao mapa
#fazendo uma lista com os itens a serem utilizados
lat = list(gdfSC['Latitude'])
long = list(gdfSC['Longitude'])
cidade = list(gdfSC['City'])
nome = list(gdfSC['Name'])
inicio = list(gdfSC['StartDate'])
fim = list(gdfSC['EndDate'])
fg = folium.FeatureGroup(name = 'my map')
#looping para plotar
for lat, long, cidade, nome, inicio, fim in zip(lat, long, cidade, nome, inicio, fim):
  fg.add_child(folium.Marker(location = [lat, long], popup =" <b> Nome: </b>" + nome + "<br> <b> Cidade: </b>" + cidade + "<br> <b> Inicio </b>" +inicio+ "<br> <b> Fim: </b>" +fim))

map.add_child(fg)

#Fazer um filtro para baixar dados da cidade de Florianópolis
dataDownload = gdfSC[gdfSC['City'] == 'FLORIANÓPOLIS']
dataDownload.head()

#Total são 4 estações em Florianópolis.
#Fazendo uma lista com os códigos
FpolisStations = dataDownload.Code.to_list()
#Mostrando a lista
FpolisStations

#Baixando os dados a partir da lista gerada
downloaded = hydrobr.get_data.ANA.prec_data(FpolisStations)

"""Foi baixado os dados das 4 estações e levou cerca de 6 segundos."""

#obtendo informações dos dados
downloaded.info()

downloaded.head()

import plotly.io as pio
pio.renderers
pio.renderers.default = 'colab'
downloaded.iplot()

downloaded.mean().iplot(kind='bar')

downloaded.iplot(kind='box')

downloaded['02748006'].iplot(kind='bar')

#Plotando um gráfico de Gantt para ver a distriuição dos dados.
gantt_fig = hydrobr.Plot.gantt(downloaded) #Get the Gantt Fig
#Updating the layout
fig = gantt_fig.update_layout(autosize=False,
                        width=1000,
                        height=500,
                        xaxis_title = 'Ano',
                        yaxis_title = 'Codigo da Estação')

#To plot and save the gantt plot as html
#plot(gantt_fig,filename='gantt' + '.html') 
fig.show()

# Selecionando os códigos das estações
downloaded.to_csv('dados_precipitacao_fpolis.csv', sep=';')
from google.colab import files
files.download('dados_precipitacao_fpolis.csv')